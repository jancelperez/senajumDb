{"version":3,"sources":["db-test.js"],"names":["test","require","uuid","r","Db","fixtures","dbName","v4","db","before","t","connect","true","connected","after","disconnect","false","always","conn","dbDrop","run","is","guardarImagen","imagen","getImage","created","description","url","likes","liked","deepEqual","tags","user_id","id","public_id","encode","truthy","createdAt","likeImagen","result","getImagen","imagenes","getImages","guardarImagenes","map","img","Promise","all","length"],"mappings":"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","file":"db-test.js","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst uuid = require('uuid-base62')\r\nconst r = require('rethinkdb')\r\nconst Db = require('../')\r\nconst fixtures = require('./fixtures')\r\n\r\nconst dbName = `senagram_${uuid.v4()}`\r\nconst db = new Db({ db: dbName })\r\n\r\ntest.before('configurar base de datos', async t => {\r\n  await db.connect()\r\n  t.true(db.connected, 'esta conectado')\r\n})\r\n\r\ntest.after('desconectando base de datos', async t => {\r\n  await db.disconnect()\r\n  t.false(db.connected, 'esta desconectado')\r\n})\r\n\r\ntest.after.always('borrar la base de datos', async t => {\r\n  let conn = await r.connect({})\r\n  await r.dbDrop(dbName).run(conn)\r\n})\r\n\r\ntest('guardar imagen', async t => {\r\n  t.is(typeof db.guardarImagen, 'function', 'guardarImagen es una funcion')\r\n\r\n  let imagen = fixtures.getImage()\r\n\r\n  let created = await db.guardarImagen(imagen)\r\n  t.is(created.description, imagen.description)\r\n  t.is(created.url, imagen.url)\r\n  t.is(created.likes, imagen.likes)\r\n  t.is(created.liked, imagen.liked)\r\n  t.deepEqual(created.tags, ['genial', 'tags', 'senagram'])\r\n  t.is(created.user_id, imagen.user_id)\r\n  t.is(typeof created.id, 'string')\r\n  t.is(created.public_id, uuid.encode(created.id))\r\n  t.truthy(created.createdAt)\r\n})\r\n\r\ntest('like imagenes', async t => {\r\n  t.is(typeof db.likeImagen, 'function', 'likeImagen es una funcion ')\r\n\r\n  let imagen = fixtures.getImage()\r\n  let created = await db.guardarImagen(imagen)\r\n  let result = await db.likeImagen(created.public_id)\r\n  t.true(result.liked)\r\n  t.is(result.likes, imagen.likes + 1)\r\n})\r\n\r\ntest('obtener imagen', async t => {\r\n  t.is(typeof db.getImagen, 'function', 'getImage es una funcion')\r\n\r\n  let imagen = fixtures.getImage()\r\n  let created = await db.guardarImagen(imagen)\r\n  let result = await db.getImagen(created.public_id)\r\n\r\n  t.deepEqual(created, result)\r\n})\r\n\r\ntest('listar todas las imagenes', async t => {\r\n  let imagenes = await fixtures.getImages()\r\n  let guardarImagenes = imagenes.map(img => db.guardarImagen(img))\r\n  let created = await Promise.all(guardarImagenes)\r\n  let result = await db.getImagen()\r\n\r\n  t.is(created.length, result.length)\r\n})\r\n"]}