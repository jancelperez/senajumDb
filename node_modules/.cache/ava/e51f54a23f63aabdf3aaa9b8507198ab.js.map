{"version":3,"sources":["db-test.js"],"names":["test","require","uuid","r","Db","dbName","v4","db","before","t","connect","true","connected","after","disconnect","false","always","conn","dbDrop","run","is","guardarImagen","image","url","likes","liked","user_id","created","id","truthy","createdAt"],"mappings":"AAAA;;;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,OAAOD,QAAQ,aAAR,CAAb;AACA,MAAME,IAAIF,QAAQ,WAAR,CAAV;AACA,MAAMG,KAAKH,QAAQ,KAAR,CAAX;;AAEA,MAAMI,SAAU,YAAWH,KAAKI,EAAL,EAAU,EAArC;AACA,MAAMC,KAAK,IAAIH,EAAJ,CAAO,EAAEG,IAAIF,MAAN,EAAP,CAAX;;AAEAL,KAAKQ,MAAL,CAAY,0BAAZ;AAAA,+BAAwC,WAAMC,CAAN,EAAW;AAAA;;AACjD,UAAMF,GAAGG,OAAH,EAAN;AACAD,MAAEE,IAAF,uBAAO,qCAAGC,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAqB,gBAArB;AACD,GAHD;;AAAA;AAAA;AAAA;AAAA;;AAKAZ,KAAKa,KAAL,CAAW,6BAAX;AAAA,gCAA0C,WAAMJ,CAAN,EAAW;AAAA;;AACnD,UAAMF,GAAGO,UAAH,EAAN;AACAL,MAAEM,KAAF,yBAAQ,sCAAGH,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAsB,mBAAtB;AACD,GAHD;;AAAA;AAAA;AAAA;AAAA;;AAKAZ,KAAKa,KAAL,CAAWG,MAAX,CAAkB,yBAAlB;AAAA,gCAA6C,WAAMP,CAAN,EAAW;AACtD,QAAIQ,OAAO,MAAMd,EAAEO,OAAF,CAAU,EAAV,CAAjB;AACA,UAAMP,EAAEe,MAAF,CAASb,MAAT,EAAiBc,GAAjB,CAAqBF,IAArB,CAAN;AACD,GAHD;;AAAA;AAAA;AAAA;AAAA;;AAKAjB,KAAK,gBAAL;AAAA,gCAAuB,WAAMS,CAAN,EAAW;AAAA;;AAChCA,MAAEW,EAAF,CAAK,OAAOb,GAAGc,aAAf,EAA8B,UAA9B,EAA0C,8BAA1C;;AAEA,QAAIC,QAAQ;AACVC,WAAM,yBAAwBrB,KAAKI,EAAL,EAAU,MAD9B;AAEVkB,aAAO,CAFG;AAGVC,aAAO,KAHG;AAIVC,eAASxB,KAAKA,IAAL;AAJC,KAAZ;;AAOA,QAAIyB,UAAU,MAAMpB,GAAGc,aAAH,CAAiBC,KAAjB,CAApB;AACAb,MAAEW,EAAF,CAAKO,QAAQJ,GAAb,EAAkBD,MAAMC,GAAxB;AACAd,MAAEW,EAAF,CAAKO,QAAQH,KAAb,EAAoBF,MAAME,KAA1B;AACAf,MAAEW,EAAF,CAAKO,QAAQF,KAAb,EAAoBH,MAAMG,KAA1B;AACAhB,MAAEW,EAAF,CAAKO,QAAQD,OAAb,EAAsBJ,MAAMI,OAA5B;AACAjB,MAAEW,EAAF,CAAK,OAAOO,QAAQC,EAApB,EAAwB,QAAxB;AACAnB,MAAEoB,MAAF,yBAAS,2CAAQC,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,GAjBD;;AAAA;AAAA;AAAA;AAAA","file":"db-test.js","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst uuid = require('uuid-base62')\r\nconst r = require('rethinkdb')\r\nconst Db = require('../')\r\n\r\nconst dbName = `senagram_${uuid.v4()}`\r\nconst db = new Db({ db: dbName })\r\n\r\ntest.before('configurar base de datos', async t => {\r\n  await db.connect()\r\n  t.true(db.connected, 'esta conectado')\r\n})\r\n\r\ntest.after('desconectando base de datos', async t => {\r\n  await db.disconnect()\r\n  t.false(db.connected, 'esta desconectado')\r\n})\r\n\r\ntest.after.always('borrar la base de datos', async t => {\r\n  let conn = await r.connect({})\r\n  await r.dbDrop(dbName).run(conn)\r\n})\r\n\r\ntest('guardar imagen', async t => {\r\n  t.is(typeof db.guardarImagen, 'function', 'guardarImagen es una funcion')\r\n\r\n  let image = {\r\n    url: `https://senagram.test/${uuid.v4()}.jpg`,\r\n    likes: 0,\r\n    liked: false,\r\n    user_id: uuid.uuid()\r\n  }\r\n\r\n  let created = await db.guardarImagen(image)\r\n  t.is(created.url, image.url)\r\n  t.is(created.likes, image.likes)\r\n  t.is(created.liked, image.liked)\r\n  t.is(created.user_id, image.user_id)\r\n  t.is(typeof created.id, 'string')\r\n  t.truthy(created.createdAt)\r\n})\r\n"]}