{"version":3,"sources":["db-test.js"],"names":["test","require","uuid","r","Db","utils","fixtures","beforeEach","t","dbName","v4","db","setup","connect","context","true","connected","afterEach","always","disconnect","false","conn","dbDrop","run","is","guardarImagen","imagen","getImage","created","description","url","likes","liked","deepEqual","tags","userId","id","publicId","encode","truthy","createdAt","likeImagen","result","getImagen","throws","imagenes","getImages","guardarImagenes","map","img","Promise","all","getImagenes","length","guardarUsuario","usuario","getUser","referenciaPassword","password","username","email","name","encryptar","getUsuario","autenticar","exitoso","fallido","falla","getImagenesPorUsuario","random","Math","round","i","push","getImagenesPorTag","tag"],"mappings":"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","file":"db-test.js","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst uuid = require('uuid-base62')\r\nconst r = require('rethinkdb')\r\nconst Db = require('../')\r\nconst utils = require('../lib/utils')\r\nconst fixtures = require('./fixtures')\r\n\r\ntest.beforeEach('configurar base de datos', async t => {\r\n  const dbName = `senagram_${uuid.v4()}`\r\n  const db = new Db({db: dbName, setup: true})\r\n  await db.connect()\r\n  t.context.db = db\r\n  t.context.dbName = dbName\r\n  t.true(db.connected, 'esta conectado')\r\n})\r\n\r\ntest.afterEach.always('desconectando y limpiando base de datos', async t => {\r\n  let db = t.context.db\r\n  let dbName = t.context.dbName\r\n\r\n  await db.disconnect()\r\n  t.false(db.connected, 'esta desconectado')\r\n\r\n  let conn = await r.connect({})\r\n  await r.dbDrop(dbName).run(conn)\r\n})\r\n\r\ntest('guardar imagen', async t => {\r\n  let db = t.context.db\r\n  t.is(typeof db.guardarImagen, 'function', 'guardarImagen es una funcion')\r\n\r\n  let imagen = fixtures.getImage()\r\n\r\n  let created = await db.guardarImagen(imagen)\r\n  t.is(created.description, imagen.description)\r\n  t.is(created.url, imagen.url)\r\n  t.is(created.likes, imagen.likes)\r\n  t.is(created.liked, imagen.liked)\r\n  t.deepEqual(created.tags, ['genial', 'tags', 'senagram'])\r\n  t.is(created.userId, imagen.userId)\r\n  t.is(typeof created.id, 'string')\r\n  t.is(created.publicId, uuid.encode(created.id))\r\n  t.truthy(created.createdAt)\r\n})\r\n\r\ntest('like imagenes', async t => {\r\n  let db = t.context.db\r\n  t.is(typeof db.likeImagen, 'function', 'likeImagen es una funcion ')\r\n\r\n  let imagen = fixtures.getImage()\r\n  let created = await db.guardarImagen(imagen)\r\n  let result = await db.likeImagen(created.publicId)\r\n  t.true(result.liked)\r\n  t.is(result.likes, imagen.likes + 1)\r\n})\r\n\r\ntest('obtener imagen', async t => {\r\n  let db = t.context.db\r\n  t.is(typeof db.getImagen, 'function', 'getImage es una funcion')\r\n\r\n  let imagen = fixtures.getImage()\r\n  let created = await db.guardarImagen(imagen)\r\n  let result = await db.getImagen(created.publicId)\r\n\r\n  t.deepEqual(created, result)\r\n\r\n  await t.throws(db.getImagen('equivoca'), /no encontrado/)\r\n})\r\n\r\ntest('listar todas las imagenes', async t => {\r\n  let db = t.context.db\r\n  let imagenes = await fixtures.getImages()\r\n  let guardarImagenes = imagenes.map(img => db.guardarImagen(img))\r\n  let created = await Promise.all(guardarImagenes)\r\n  let result = await db.getImagenes()\r\n\r\n  t.is(created.length, result.length)\r\n})\r\n\r\ntest('guardar usarios', async t => {\r\n  let db = t.context.db\r\n\r\n  t.is(typeof db.guardarUsuario, 'function', 'guardarUsuario es una funcion')\r\n\r\n  let usuario = fixtures.getUser()\r\n  let referenciaPassword = usuario.password\r\n  let created = await db.guardarUsuario(usuario)\r\n\r\n  t.is(usuario.username, created.username)\r\n  t.is(usuario.email, created.email)\r\n  t.is(usuario.name, created.name)\r\n  t.is(utils.encryptar(referenciaPassword), created.password)\r\n  t.is(typeof created.id, 'string')\r\n  t.truthy(created.createdAt)\r\n})\r\n\r\ntest('obtener usuario', async t => {\r\n  let db = t.context.db\r\n\r\n  t.is(typeof db.getUsuario, 'function', 'obtener usuario')\r\n\r\n  let usuario = fixtures.getUser()\r\n  let created = await db.guardarUsuario(usuario)\r\n  let result = await db.getUsuario(usuario.username)\r\n\r\n  t.deepEqual(created, result)\r\n\r\n  await t.throws(db.getUsuario('jaa'), /no encontrado/)\r\n})\r\n\r\ntest('autenticar usuario', async t => {\r\n  let db = t.context.db\r\n\r\n  t.is(typeof db.autenticar, 'function', 'autenticar es una funicion')\r\n\r\n  let usuario = fixtures.getUser()\r\n  let referenciaPassword = usuario.password\r\n  await db.guardarUsuario(usuario)\r\n\r\n  let exitoso = await db.autenticar(usuario.username, referenciaPassword)\r\n  t.true(exitoso)\r\n\r\n  let fallido = await db.autenticar(usuario.username, 'jaa')\r\n  t.false(fallido)\r\n\r\n  let falla = await db.autenticar('jaa', 'bar')\r\n  t.false(falla)\r\n})\r\n\r\ntest('listar fotos por usuario', async t => {\r\n  let db = t.context.db\r\n\r\n  t.is(typeof db.getImagenesPorUsuario, 'function', 'getImagenesPorUsuario es una funcion')\r\n\r\n  let imagenes = fixtures.getImages(10)\r\n  let userId = uuid.uuid()\r\n  let random = Math.round(Math.random() * imagenes.length)\r\n\r\n  let guardarImagenes = []\r\n  for (let i = 0; i < imagenes.length; i++) {\r\n    if (i < random) {\r\n      imagenes[i].userId = userId\r\n    }\r\n\r\n    guardarImagenes.push(db.guardarImagen(imagenes[i]))\r\n  }\r\n\r\n  await Promise.all(guardarImagenes)\r\n\r\n  let result = await db.getImagenesPorUsuario(userId)\r\n  t.is(result.length, random)\r\n})\r\n\r\ntest('listar imagenes por tag', async t => {\r\n  let db = t.context.db\r\n\r\n  t.is(typeof db.getImagenesPorTag, 'function', 'getImagenesPorTag es una funcion')\r\n\r\n  let imagenes = fixtures.getImages(10)\r\n  let tag = '#filtre'\r\n  let random = Math.round(Math.random() * imagenes.length)\r\n\r\n  let guardarImagenes = []\r\n  for (let i = 0; i < imagenes.length; i++) {\r\n    if (i < random) {\r\n      imagenes[i].description = tag\r\n    }\r\n\r\n    guardarImagenes.push(db.guardarImagen(imagenes[i]))\r\n  }\r\n\r\n  await Promise.all(guardarImagenes)\r\n\r\n  let result = await db.getImagenesPorTag(tag)\r\n  t.is(result.length, random)\r\n})\r\n"]}